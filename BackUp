#!/usr/bin/env bash

readBackupList() {
  local backup_rc
  local backup_list
  # check backup file list location
  if [[ -r "${XDG_CONFIG_HOME}/backup/${1}" ]]; then
    backup_rc="${XDG_CONFIG_HOME}/backup/${1}"
  elif [[ -r "${HOME}/.backup/${1}" ]]; then
    backup_rc="${HOME}/.backup/${1}"
  elif [[ -r "${1}" ]]; then
    backup_rc="${1}"
  else
    return 1
  fi
  # read backup list from backup file
  while read -r line; do
    [[ ${line} =~ ^[[:space:]]*# ]] && continue
    backup_list+="${line} "
  done < ${backup_rc}
  echo "${backup_list}"
}

createBackup() {
  printf "\nCreating ${1}...\n"
  tar --create ${vcs} ${tar_type:---gzip} --preserve-permissions --same-owner --verbose --file ${1} ${@:2}
  (( ${?} )) || printf "done.\n\n"
}

sendToCloud() {
  printf "Checking Google Drive..."
  ping -4 -c 3 drive.google.com > /dev/null 2>&1
  if [[ ${?} -eq 0 ]]; then
    echo "available!"
    echo "Sending ${1} to Google Drive..."
    rclone copy --progress ${1} GoogleDrive:"LinuxBackup"
    (( ${?} )) || printf "done.\n\n"
  else
    echo "not available."
    return 1
  fi
}

removeBackup() {
  printf "Deleting ${1}..."
  rm ${1}
  (( ${?} )) || echo "done."
}

errorMsg() {
  echo "${0##*/}: cannot use option '${1}' together with '${2}'"
  exit 1
}

helpMsg() {
  echo "usage: ${0##*/} <options>"
  echo '  options:'
  echo '     none:   create backup files, send them to Google Drive'
  echo '              and delete local copies (optional)'
  echo '   --dry:    do a dry run (only check for errors)'
  echo '   --vcs:    include all version control system directories'
  echo '   --user:   only backup user filelist (user.backup)'
  echo '   --system: only backup system filelist (system.backup)'
  echo '   --auto:   create backup files, send them to Google Drive'
  echo '              and delete local copies'
  echo '   --local:  create backup files locally'
  echo '   --bzip2:  create bzip2 files (.tar.bz2)'
  echo '   --gzip:   create gzip files (.tar.gz) [default]'
  echo '   --zstd:   create zst files (.tar.zst)'
  echo '   --help:   this help'
}

doDefault() {
  local reply=''
  read -p "Send ${1} to Google Drive? [y/N]:" -n 1 reply
  printf "\n"
  case ${reply} in
    [Yy]) sendToCloud ${1};;
    *)    printf "\n";;
  esac
  read -p "Delete ${1}? [y/N]:" -n 1 reply
  printf "\n"
  case ${reply} in
    [Yy]) removeBackup ${1};;
    *)    printf "\n";;
  esac
}

backupFile() {
  case ${1} in
    'user')
      local backup_name=$(date +%Y-%m-%d_${USER}.tar.${extension:-gz})
      ;;
    'system')
      local backup_name=$(date +%Y-%m-%d_${HOSTNAME}.tar.${extension:-gz})
      ;;
    *)
      return 1
      ;;
  esac
  local backup_list=$(readBackupList "${1}.backup")
  if [[ -z ${backup_list} ]]; then
    echo "${0##*/}: cannot find ${1}.backup in:"
    echo "  ${XDG_CONFIG_HOME}/backup/${1}.backup"
    echo "  ${HOME}/.backup/${1}.backup"
    echo "  $(pwd)/${1}.backup"
    exit 1
  fi
  if [[ ${dry} -eq 1 ]]; then
    printf "\nDry run for ${backup_name}:\n"
    tar --create ${vcs} ${backup_list} | tar --list
    (( ${?} )) || echo "*** Result: OK"
    return 0
  else
    createBackup ${backup_name} ${backup_list}
  fi

  case ${auto} in
    --auto)
      sendToCloud ${backup_name}
      (( ${?} )) || removeBackup ${backup_name}
      ;;
    --local)
      return 0
      ;;
    *)
      doDefault ${backup_name}
      ;;
  esac
}

# initialize variables
dry=0
vcs='--exclude-vcs'
tar_type=''
user=0
system=0
auto=''

# check options
for option in ${@}; do
  case ${option} in
    --dry)
      dry=1
      ;;
    --vcs)
      vcs=''
      ;;
    --bzip2 | --gzip | --zstd)
      if [[ -z ${tar_type} || ${tar_type} == ${option} ]]; then
        case ${option} in
          --bzip2) extension="bz2";;
          --gzip)  extension="gz";;
          --zstd)  extension="zst";;
        esac
        tar_type=${option}
      else
        errorMsg ${tar_type} ${option}
      fi
      ;;
    --user)
      user=1
      ;;
    --system)
      system=1
      ;;
    --auto | --local)
      if [[ -z ${auto} || ${auto} == ${option} ]]; then
        auto=${option}
      else
        errorMsg ${auto} ${option}
      fi
      ;;
    -h | --help)
      helpMsg
      exit 0
      ;;
    *)
      echo "${0##*/}: unrecognized option '${option}'"
      helpMsg
      exit 1
      ;;
  esac
done

# begin backup process
if [[ ${user} -eq 1 && ${system} -eq 0 ]]; then
  backupFile 'user'
elif [[ ${user} -eq 0 && ${system} -eq 1 ]]; then
  backupFile 'system'
else
  backupFile 'user'
  backupFile 'system'
fi
