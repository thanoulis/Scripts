#!/usr/bin/env bash

# $USER files/directories to backup
user_list="${HOME}/Sources
${HOME}/bin
${HOME}/.ssh
${HOME}/.vim
${HOME}/.bash_logout
${HOME}/.bash_profile
${HOME}/.bashrc
${HOME}/.icons
${HOME}/.inputrc
${HOME}/.pam_environment
${HOME}/.xinitrc
${XDG_CONFIG_HOME}/cmus
${XDG_CONFIG_HOME}/conky
${XDG_CONFIG_HOME}/dunst
${XDG_CONFIG_HOME}/fish
${XDG_CONFIG_HOME}/fontconfig
${XDG_CONFIG_HOME}/git
${XDG_CONFIG_HOME}/gnupg
${XDG_CONFIG_HOME}/gtk-2.0
${XDG_CONFIG_HOME}/gtk-3.0
${XDG_CONFIG_HOME}/htop
${XDG_CONFIG_HOME}/i3
${XDG_CONFIG_HOME}/jwm
${XDG_CONFIG_HOME}/kitty
${XDG_CONFIG_HOME}/lynx
${XDG_CONFIG_HOME}/mc
${XDG_CONFIG_HOME}/mplayer
${XDG_CONFIG_HOME}/mpv
${XDG_CONFIG_HOME}/nano
${XDG_CONFIG_HOME}/openvpn
${XDG_CONFIG_HOME}/picom
${XDG_CONFIG_HOME}/rclone
${XDG_CONFIG_HOME}/redshift
${XDG_CONFIG_HOME}/rofi
${XDG_CONFIG_HOME}/stardict
${XDG_CONFIG_HOME}/systemd
${XDG_CONFIG_HOME}/tmux
${XDG_CONFIG_HOME}/weechat
${XDG_CONFIG_HOME}/X11
${XDG_CONFIG_HOME}/aurvote
${XDG_CONFIG_HOME}/mimeapps.list
${XDG_DATA_HOME}/applications"

# system files/directories to backup
system_list='/etc/iptables/iptables.rules
/etc/modprobe.d
/etc/sysctl.d
/etc/ssh/sshd_config
/etc/systemd/network
/etc/systemd/journald.conf.d
/etc/systemd/resolved.conf.d
/etc/systemd/timesyncd.conf.d
/etc/X11/xorg.conf.d
/etc/locale.conf
/etc/locale.gen
/etc/makepkg.conf
/etc/mkinitcpio.conf
/etc/pacman.conf
/etc/vconsole.conf'

createBackup() {
  echo "Creating ${1}..."
  tar --create ${vcs} ${tar_type:---gzip} --preserve-permissions --same-owner --verbose --file ${1} ${@:2}
  (( ${?} )) || printf "done.\n\n"
}

checkGoogleDrive() {
  printf "Checking Google Drive..."
  ping -4 -c 3 drive.google.com > /dev/null 2>&1
  if [[ ${?} -eq 0 ]]; then
    echo "available!"
    rcloneBackup ${@}
  else
    echo "not available."
    return 1
  fi
}

rcloneBackup() {
  for file in ${@}; do
    echo "Sending ${file} to Google Drive..."
    rclone copy --progress ${file} GoogleDrive:"LinuxBackup"
    (( ${?} )) || printf "done.\n\n"
  done
}

removeBackup() {
  for file in ${@}; do
    printf "Deleting ${file}..."
    rm ${file}
    (( ${?} )) || echo "done."
  done
}

errorMsg() {
  echo "${0##*/}: cannot use option '${1}' together with '${2}'"
  exit 1
}

helpMsg() {
  echo "usage: ${0##*/} <options>"
  echo "  options:"
  echo "      none:  create backup files, send them to Google Drive"
  echo "              and delete local copies (optional)"
  echo "    --dry:   do a dry run (only check for errors)"
  echo "    --vcs:   include all version control system directories"
  echo "    --auto:  create backup files, send them to Google Drive"
  echo "              and delete local copies"
  echo "    --local: create backup files only"
  echo "    --bzip2: create bzip2 files (.tar.bz2)"
  echo "    --gzip:  create gzip files (.tar.gz) [default]"
  echo "    --zstd:  create zst files (.tar.zst)"
  echo "    --help:  this help"
}

doDefault() {
  local reply=''
  read -p "Send backup files to Google Drive? [y/N]:" -n 1 reply
  printf "\n"
  case ${reply} in
    [Yy]) checkGoogleDrive ${@};;
    *)    printf "\n";;
  esac
  read -p "Delete backup files? [y/N]:" -n 1 reply
  printf "\n"
  case ${reply} in
    [Yy]) removeBackup ${@};;
    *)    printf "\n";;
  esac
}

Main() {
  local user_backup=$(date +%Y-%m-%d_${USER}.tar.${extension:-gz})
  local system_backup=$(date +%Y-%m-%d_${HOSTNAME}.tar.${extension:-gz})
  local backup_list="user system"
  local filelist="${system_backup} ${user_backup}"
  for item in ${backup_list}; do
    local backup="${item}_backup"
    local list="${item}_list"
    if [[ ${dry} -eq 1 ]]; then
      printf "\nDry run for ${!backup}:\n"
      tar --create ${vcs} ${!list} | tar --list
      (( ${?} )) || echo "*** Result: OK"
    else
      createBackup ${!backup} ${!list}
    fi
  done
  (( ${dry} )) && exit 0

  case ${auto} in
    --auto)
      checkGoogleDrive ${filelist}
      (( ${?} )) || removeBackup ${filelist}
      ;;
    --local)
      exit 0
      ;;
    *)
      doDefault ${filelist}
      ;;
  esac
}

# initialize variables
dry=0
vcs='--exclude-vcs'
tar_type=''
auto=''

# check options
for option in ${@}; do
  case ${option} in
    --dry)
      dry=1
      ;;
    --vcs)
      vcs=''
      ;;
    --bzip2 | --gzip | --zstd)
      if [[ -z ${tar_type} || ${tar_type} == ${option} ]]; then
        case ${option} in
          --bzip2) extension="bz2";;
          --gzip)  extension="gz";;
          --zstd)  extension="zst";;
        esac
        tar_type=${option}
      else
        errorMsg ${tar_type} ${option}
      fi
      ;;
    --auto | --local)
      if [[ -z ${auto} || ${auto} == ${option} ]]; then
        auto=${option}
      else
        errorMsg ${auto} ${option}
      fi
      ;;
    -h | --help)
      helpMsg
      exit 0
      ;;
    *)
      echo "${0##*/}: unrecognized option '${option}'"
      helpMsg
      exit 1
      ;;
  esac
done

# execute main program
Main
