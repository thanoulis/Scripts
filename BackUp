#!/usr/bin/env bash

# $USER files/directories to backup
user_list="${HOME}/Sources
${HOME}/bin
${HOME}/.ssh
${HOME}/.vim
${HOME}/.bash_logout
${HOME}/.bash_profile
${HOME}/.bashrc
${HOME}/.icons
${HOME}/.inputrc
${HOME}/.pam_environment
${HOME}/.xinitrc
${XDG_CONFIG_HOME}/cmus
${XDG_CONFIG_HOME}/conky
${XDG_CONFIG_HOME}/dunst
${XDG_CONFIG_HOME}/fish
${XDG_CONFIG_HOME}/fontconfig
${XDG_CONFIG_HOME}/git
${XDG_CONFIG_HOME}/gnupg
${XDG_CONFIG_HOME}/gtk-2.0
${XDG_CONFIG_HOME}/gtk-3.0
${XDG_CONFIG_HOME}/htop
${XDG_CONFIG_HOME}/i3
${XDG_CONFIG_HOME}/jwm
${XDG_CONFIG_HOME}/mc
${XDG_CONFIG_HOME}/mplayer
${XDG_CONFIG_HOME}/mpv
${XDG_CONFIG_HOME}/nano
${XDG_CONFIG_HOME}/openvpn
${XDG_CONFIG_HOME}/picom
${XDG_CONFIG_HOME}/rclone
${XDG_CONFIG_HOME}/redshift
${XDG_CONFIG_HOME}/rofi
${XDG_CONFIG_HOME}/stardict
${XDG_CONFIG_HOME}/systemd
${XDG_CONFIG_HOME}/tmux
${XDG_CONFIG_HOME}/weechat
${XDG_CONFIG_HOME}/X11
${XDG_CONFIG_HOME}/yay
${XDG_CONFIG_HOME}/aurvote
${XDG_CONFIG_HOME}/mimeapps.list
${XDG_DATA_HOME}/applications"

# system files/directories to backup
system_list='/etc/iptables/iptables.rules
/etc/modprobe.d
/etc/systemd/network
/etc/systemd/journald.conf.d
/etc/systemd/resolved.conf.d
/etc/systemd/timesyncd.conf.d
/etc/udev/rules.d
/etc/X11/xorg.conf.d
/etc/locale.conf
/etc/locale.gen
/etc/makepkg.conf
/etc/mkinitcpio.conf
/etc/pacman.conf
/etc/vconsole.conf
/usr/local/bin'

createBackup() {
  echo "Creating ${1}..."
  tar --create ${vcs} --${compression:-gzip} --preserve-permissions --same-owner --verbose --file ${1} ${@:2}
  (( ${?} )) || printf "done.\n\n"
}

checkGoogleDrive() {
  printf "Checking Google Drive..."
  ping -4 -c 3 drive.google.com > /dev/null 2>&1
  if (( ${?} )); then
    echo "not available."
    return 1
  else
    echo "available!"
    rcloneBackup ${@}
  fi
}

rcloneBackup() {
  for file in ${@}; do
    echo "Sending ${file} to Google Drive..."
    rclone copy --progress ${file} GoogleDrive:"LinuxBackup"
    (( ${?} )) || printf "done.\n\n"
  done
}

removeBackup() {
  for file in ${@}; do
    printf "Deleting ${file}..."
    rm ${file}
    (( ${?} )) || echo "done."
  done
}

default() {
  read -p "Send backup files to Google Drive? [y/N]:" -n 1 reply_rclone
  printf "\n"
  case ${reply_rclone} in
    [Yy])
      checkGoogleDrive ${@}
      ;;
    *)
      printf "\n"
      ;;
  esac
  read -p "Delete backup files? [y/N]:" -n 1 reply_delete
  printf "\n"
  case ${reply_delete} in
    [Yy])
      removeBackup ${@}
      ;;
    *)
      printf "\n"
      ;;
  esac
}

errorMsg() {
  echo "${0##*/}: cannot use option '--${1}' together with '${2}'"
  exit 1
}

helpMsg() {
  echo "usage: ${0##*/} <options>"
  echo "  options:"
  echo "      none:  create backup files, send them to Google Drive"
  echo "              and delete local copies (optional)"
  echo "    --vcs:   include all version control system directories"
  echo "    --auto:  create backup files, send them to Google Drive"
  echo "              and delete local copies"
  echo "    --local: create backup files only"
  echo "    --bzip2: create bzip2 files (.tar.bz2)"
  echo "    --gzip:  create gzip files (.tar.gz) [default]"
  echo "    --zstd:  create zst files (.tar.zst)"
  echo "    --help:  this help"
}

vcs='--exclude-vcs'
# check options
for option in ${@}; do
  case ${option} in
    --vcs)
        vcs=''
      ;;
    --bzip2 | --gzip | --zstd)
      if [[ -z ${compression} ]]; then
        case ${option} in
          --bzip2) extension="bz2";;
          --gzip)  extension="gz";;
          --zstd)  extension="zst";;
        esac
        compression=${option:2}
      else
        errorMsg ${compression} ${option}
      fi
      ;;
    --auto | --local)
      if [[ -z ${auto} ]]; then
        auto=${option:2}
      else
        errorMsg ${auto} ${option}
      fi
      ;;
    -h | --help)
      helpMsg
      exit 0
      ;;
    *)
      echo "${0##*/}: unrecognized option '${option}'"
      helpMsg
      exit 1
      ;;
  esac
done

# backup filenames
user_backup=$(date +%Y-%m-%d_${USER}.tar.${extension:-gz})
system_backup=$(date +%Y-%m-%d_${HOSTNAME}.tar.${extension:-gz})
backup_list="user system"
filelist="${system_backup} ${user_backup}"
for item in ${backup_list}; do
  backup="${item}_backup"
  list="${item}_list"
  createBackup ${!backup} ${!list}
done

case ${auto} in
  auto)
    checkGoogleDrive ${filelist}
    (( ${?} )) || removeBackup ${filelist}
    ;;
  local)
    exit 0
    ;;
  *)
    default ${filelist}
    ;;
esac
